# main.py

from math import inf
from pathlib import Path
from random import randint

import milp_flow.data_store as ds
from milp_flow.initialize import initialize_data
from milp_flow.generate_reference_data import generate_reference_data
from milp_flow.generate_graph_data import generate_graph_data
from milp_flow.generate_workerman_data import generate_workerman_data
from milp_flow.optimize import optimize


min_lodging = {
    "Velia": 0,
    "Heidel": 0,
    "Glish": 0,
    "Calpheon City": 0,
    "Olvia": 0,
    "Keplan": 0,
    "Port Epheria": 0,
    "Trent": 0,
    "Iliya Island": 0,
    "Altinova": 0,
    "Tarif": 0,
    "Valencia City": 0,
    "Shakatu": 0,
    "Sand Grain Bazaar": 0,
    "Ancado Inner Harbor": 0,
    "Arehaza": 0,
    "Old Wisdom Tree": 0,
    "Gr\u00e1na": 0,
    "Duvencrune": 0,
    "O'draxxia": 0,
    "Eilton": 0,
    "Dalbeol Village": 0,
    "Nampo's Moodle Village": 0,
    "Nopsae's Byeot County": 0,
    "Muzgar": 0,
    "Yukjo Street": 0,
    "Godu Village": 0,
    "Bukpo": 0,
}
max_lodging = {
    "Velia": 6,
    "Heidel": 6,
    "Glish": 5,
    "Calpheon City": 6,
    "Olvia": 5,
    "Keplan": 5,
    "Port Epheria": 5,
    "Trent": 5,
    "Iliya Island": 0,
    "Altinova": 7,
    "Tarif": 5,
    "Valencia City": 6,
    "Shakatu": 5,
    "Sand Grain Bazaar": 5,
    "Ancado Inner Harbor": 0,
    "Arehaza": 5,
    "Old Wisdom Tree": 5,
    "Gr\u00e1na": 6,
    "Duvencrune": 5,
    "O'draxxia": 7,
    "Eilton": 5,
    "Dalbeol Village": 5,
    "Nampo's Moodle Village": 5,
    "Nopsae's Byeot County": 5,
    "Muzgar": 5,
    "Yukjo Street": 5,
    "Godu Village": 5,
    "Bukpo": 5,
}
modifiers = {}
prices = {
    "1024": 133000,
    "1025": 7534.999999999999,
    "1026": 43400,
    "1027": 379800,
    "4001": 860,
    "4002": 815,
    "4003": 1010,
    "4004": 2820,
    "4005": 4420,
    "4007": 1300,
    "4008": 7600,
    "4009": 7450,
    "4010": 970,
    "4011": 7450,
    "4013": 7450,
    "4015": 550,
    "4057": 3720,
    "4202": 2110,
    "4203": 41900,
    "4204": 22400,
    "4206": 43400,
    "4207": 4640,
    "4401": 3950,
    "4402": 5300,
    "4403": 4340,
    "4404": 4320,
    "4405": 4900,
    "4406": 4560,
    "4407": 5650,
    "4408": 4450,
    "4409": 4880,
    "4410": 4710,
    "4411": 1320,
    "4412": 1370,
    "4413": 4320,
    "4414": 8750,
    "4476": 478000,
    "4477": 270000,
    "4601": 975,
    "4602": 4190,
    "4603": 1270,
    "4604": 3550,
    "4606": 4190,
    "4607": 4050,
    "4608": 2800,
    "4609": 4190,
    "4610": 1160,
    "4611": 1180,
    "4612": 362,
    "4614": 476,
    "4615": 520,
    "4616": 1180,
    "4619": 1000,
    "4621": 5600,
    "4657": 4850,
    "4660": 6750,
    "4663": 14600,
    "4670": 1710,
    "4673": 1870,
    "4683": 4170,
    "4694": 1970,
    "4697": 1930,
    "4701": 4170,
    "4801": 2540,
    "4802": 2820,
    "4803": 1620,
    "4804": 2330,
    "4805": 2040,
    "5001": 19600,
    "5002": 19600,
    "5003": 19500,
    "5004": 19600,
    "5005": 4160,
    "5006": 2430,
    "5007": 5300,
    "5008": 1940,
    "5009": 1130,
    "5010": 19600,
    "5011": 1750,
    "5012": 2500,
    "5013": 2510,
    "5014": 1890,
    "5015": 1050,
    "5016": 1510,
    "5017": 985,
    "5018": 1590,
    "5020": 28000,
    "5023": 1610,
    "5024": 37300,
    "5205": 133000,
    "5401": 329,
    "5402": 311,
    "5404": 277,
    "5405": 294,
    "5407": 700,
    "5408": 610,
    "5409": 580,
    "5410": 468,
    "5411": 710,
    "5412": 491,
    "5413": 700,
    "5414": 730,
    "5421": 610,
    "5422": 700,
    "5425": 610,
    "5426": 1450,
    "5427": 2090,
    "5428": 2010,
    "5429": 1160,
    "5430": 2270,
    "5431": 1930,
    "5432": 2170,
    "5433": 2840,
    "5451": 3870,
    "5471": 32400,
    "5516": 7600,
    "5517": 25500,
    "5518": 459,
    "5519": 492,
    "5520": 489,
    "5521": 470,
    "5522": 1090,
    "5532": 1510,
    "5544": 3770,
    "5546": 2160,
    "5548": 3770,
    "5550": 3590,
    "5801": 1880,
    "5802": 640,
    "5803": 915,
    "5804": 1010,
    "5851": 8500,
    "5852": 2430,
    "5853": 2940,
    "5854": 4490,
    "5960": 43400,
    "6501": 44700,
    "6504": 334000,
    "6505": 412000,
    "6506": 405000,
    "6656": 5250,
    "6657": 1600,
    "7001": 1030,
    "7002": 960,
    "7003": 980,
    "7004": 865,
    "7005": 1020,
    "7009": 2340,
    "7014": 10100,
    "7016": 645,
    "7017": 378,
    "7018": 630,
    "7019": 560,
    "7020": 1050,
    "7021": 286,
    "7022": 219,
    "7026": 432,
    "7304": 545,
    "7306": 1100,
    "7307": 805,
    "7309": 920,
    "7312": 660,
    "7321": 10000,
    "7347": 408,
    "7348": 650,
    "7360": 3170,
    "7702": 1020,
    "7921": 1520,
    "8012": 0,
    "8013": 0,
    "8014": 0,
    "8015": 0,
    "8022": 1000,
    "8027": 0,
    "8028": 0,
    "8029": 0,
    "8030": 0,
    "8502": 60500,
    "8507": 46200,
    "8508": 15800,
    "8509": 2540,
    "8510": 5800,
    "8512": 9750,
    "8525": 31100,
    "8526": 16400,
    "8527": 13500,
    "8529": 6050,
    "8530": 7050,
    "8531": 6750,
    "8534": 3160,
    "8535": 2780,
    "8536": 3160,
    "8556": 13500,
    "8560": 3270,
    "8561": 36700,
    "8564": 2690,
    "8566": 2540,
    "8567": 3440,
    "8568": 3050,
    "8570": 11200,
    "8571": 19200,
    "8572": 14600,
    "8573": 6100,
    "8574": 2300,
    "8577": 12500,
    "8578": 5650,
    "8579": 3270,
    "8581": 18900,
    "8584": 18200,
    "8585": 6900,
    "8598": 18200,
    "8602": 4700,
    "8603": 6850,
    "8604": 19900,
    "8662": 15200,
    "8663": 9600,
    "8665": 17600,
    "8933": 20000,
    "9064": 3130,
    "9069": 43800,
    "9071": 8760,
    "42418": 3000000,
    "44035": 16,
    "44065": 125,
    "44118": 100,
    "44119": 19,
    "44121": 25,
    "44141": 65,
    "44179": 840,
    "44230": 1440,
    "44250": 150,
    "44253": 300,
    "44254": 150,
    "44255": 262,
    "44256": 300,
    "44257": 412,
    "44258": 150,
    "44259": 382,
    "44260": 900,
    "44287": 100,
    "44288": 100,
    "44356": 620,
    "44357": 760,
    "44406": 64,
    "65267": 1000000,
    "752023": 51000,
    "820035": 50000,
    "820036": 50000,
    "820037": 50000,
    "820038": 50000,
    "820039": 50000,
    "820101": 259,
    "820102": 249,
    "820107": 338,
    "820108": 326,
    "820110": 295,
    "820113": 510,
    "820117": 1230,
    "820120": 2250,
    "820123": 2540,
    "820136": 329,
    "820138": 1350,
}
grindTakenList = [
    724,  # Hexe Sanctuary
    1704,  # Stars End
]


def main():
    # import sys
    # sys.activate_stack_trampoline("perf")

    import datetime
    import json

    global min_lodging, max_lodging, modifiers, prices
    lodging = min_lodging

    initialize_data()

    today = datetime.datetime.now().strftime("%y%m%d_%H%M")
    logfile = Path(ds.path()).parent.parent.parent.joinpath("zzz_out", "logs")
    workerman_file = Path(ds.path()).parent.parent.parent.joinpath("zzz_out", "workerman")

    # test_set = [5, 10, 20, 30, 50, 100, 150, 200, 250, 300, 350, 400, 450, 501]
    # bench_set = [375, 395, 415, 435, 455, 475, 495, 515]
    # for budget in test_set + bench_set:
    for budget in [10]:
        config = {
            "name": "Empire",
            "budget": budget,
            "top_n": 4,
            "nearest_n": 5,
            "waypoint_ub": 25,
        }
        solver_config = {
            "num_processes": 7,
            "mip_rel_gap": 1e-4,
            "mip_feasibility_tolerance": 1e-4,
            "primal_feasibility_tolerance": 1e-4,
            "time_limit": inf,
            "random_seed": randint(0, 2147483647),
            # "log_file": logfile.joinpath(f"{budget}_{today}.log"),
            "log_file": "",
        }
        config["solver"] = solver_config

        data = generate_reference_data(config, prices, modifiers, lodging, grindTakenList)
        graph_data = generate_graph_data(data)
        prob = optimize(data, graph_data)
        workerman_json = generate_workerman_data(prob, lodging, data, graph_data)
        filename = workerman_file.joinpath(f"{budget}_{today}.json")
        with filename.open("w", encoding="utf-8") as data_file:
            json.dump(workerman_json, data_file, indent=4)


if __name__ == "__main__":
    main()
